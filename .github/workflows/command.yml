name: "command demo"

# the workflow to execute on is comments that are newly created
on:
  issue_comment:
    types: [created]

# permissions needed for reacting to IssueOps commands on issues and PRs
permissions:
  pull-requests: write
  deployments: write
  contents: write
  checks: read
  statuses: read

jobs:
  demo:
    if: ${{ github.event.issue.pull_request && github.base_ref== 'develop'}} # only run on pull request comments
    runs-on: ubuntu-latest
    outputs:
      file_changes: ${{ steps.changed-files-dir-names.outputs.all_changed_files }}
    steps:
      # Execute IssueOps branch deployment logic, hooray!
      # This will be used to "gate" all future steps below and conditionally trigger steps/deployments
      - uses: github/branch-deploy@v9.1.1
        id: branch-deploy
        with:
          trigger: ".deploy"
          noop_trigger: ".noop"
          reaction: "eyes"
          environment: development # the default environment
          environment_targets: "development,staging" 
          stable_branch: "main"
          checks: "all"
          update_branch: "disabled"

      # Run your deployment logic for your project here - examples seen below

      # Checkout your projects repository based on the ref provided by the branch-deploy step
      - run: |
          echo ${{ steps.branch-deploy.outputs.ref }}
          echo ${{ steps.branch-deploy.outputs.base_ref }}
      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch-deploy.outputs.ref }}

      # Do some fake "noop" deployment logic here
      # conditionally run a noop deployment
      - name: fake noop deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop == 'true' }}
        run: echo "I am doing a fake noop deploy"

      # Do some fake "regular" deployment logic here
      # conditionally run a regular deployment
      - name: fake regular deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 20
      - name: Detecting changes in base folder
        id: changed-files-dir-names
        uses: tj-actions/changed-files@v35.6.4
        with:
          dir_names: true
          dir_names_max_depth: 0
          json: true
          json_raw_format: true
          files_ignore: |
                  .github
          dir_names_exclude_root: false
      - name: List all changed files
        run: echo ${{ steps.changed-files-dir-names.outputs.all_changed_files }}
      - name: Output
        run: echo "I am doing a fake regular deploy"