name: "command demo"

# the workflow to execute on is comments that are newly created
on:
  issue_comment:
    types: [created]

# permissions needed for reacting to IssueOps commands on issues and PRs
permissions:
  pull-requests: write
  deployments: write
  contents: write
  checks: read
  statuses: read

jobs:
  deploy-target:
    if: ${{ github.event.issue.pull_request }} # only run on pull request comments
    runs-on: ubuntu-latest
    outputs:
      file_changes: ${{ steps.changed-files-dir-names.outputs.all_changed_files }}
      base_ref: ${{ steps.ref.outputs.base_ref }}
    steps:
      - name: "Get PR's branch name"
        id: ref
        run: |
          PR=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" ${{ github.event.issue.pull_request.url }})
          echo "base_ref=$(echo $PR | jq -r '.base.ref')" >> $GITHUB_OUTPUT
          echo $PR | jq -r '.head.sha'
          echo $PR | jq -r '.head.ref'
          echo $PR | jq -r '.base.ref'
  
  deploy-non-prod:
    runs-on: ubuntu-latest         
    needs: deploy-target
    if: ${{ needs.deploy-target.outputs.base_ref =='develop' || needs.deploy-target.outputs.base_ref =='staging'}}
    steps:
      - name: Branch deploy 
        uses: github/branch-deploy@v9.1.1
        id: branch-deploy
        with:
          trigger: ".deploy"
          noop_trigger: ".noop"
          reaction: "eyes"
          environment: development # the default environment
          environment_targets: "development,staging" 
          stable_branch: "develop"
          checks: "all"
          update_branch: "disabled"

      - name: Checkout Brach
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch-deploy.outputs.ref }}
      - name: Detecting changes in base folder
        id: changed-files-dir-names
        uses: tj-actions/changed-files@v35.6.4
        with:
          dir_names: true
          dir_names_max_depth: 0
          json: true
          json_raw_format: true
          files_ignore: |
                  .github
          dir_names_exclude_root: false
      - name: List all changed files
        run: echo ${{ steps.changed-files-dir-names.outputs.all_changed_files }}
      - name: Output
        run: echo "I am doing a fake regular deploy"
  deploy-prod:
    runs-on: ubuntu-latest         
    needs: deploy-target
    if: ${{ needs.deploy-target.outputs.base_ref =='main' }}
    steps:
      - name: Branch deploy 
        uses: github/branch-deploy@v9.1.1
        id: branch-deploy
        with:
          trigger: ".deploy"
          noop_trigger: ".noop"
          reaction: "eyes"
          environment: production # the default environment
          environment_targets: "production" 
          stable_branch: "main"
          checks: "all"
          update_branch: "disabled"
     
      - name: Checkout Brach
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch-deploy.outputs.ref }}
      - name: Detecting changes in base folder
        id: changed-files-dir-names
        uses: tj-actions/changed-files@v35.6.4
        with:
          dir_names: true
          dir_names_max_depth: 0
          json: true
          json_raw_format: true
          files_ignore: |
                   .github
          dir_names_exclude_root: false
      - name: List all changed files
        run: echo ${{ steps.changed-files-dir-names.outputs.all_changed_files }}
      - name: Output
        run: echo "I am doing a fake regular deploy"      
  complete:
    name: Complete CI for feature 
    needs: [deploy-non-prod,deploy-prod]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Check all job status
        if: >-
          ${{
                contains(needs.*.result, 'failure')
            || contains(needs.*.result, 'cancelled')
            || contains(needs.*.result, 'skipped')
          }}
        run: exit 1
